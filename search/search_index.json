{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ChatGPT for Teachers This is a course to help teachers use ChatGPT to generate content for their classrooms. It is designed to be useful for a broad audience and we include an extensive glossary for people that are new to the field of generative text . Outline of Course What is ChatGPT? Why use it When to use it Legal and ethical issues Key Concepts Prompts and responses Tokens (with a lab) Temperature Markdown Creating Great Prompts Making prompts clear Giving context Refining prompts Sample Prompts Syllabus Code of Conduct Selecting a License","title":"Home"},{"location":"#chatgpt-for-teachers","text":"This is a course to help teachers use ChatGPT to generate content for their classrooms. It is designed to be useful for a broad audience and we include an extensive glossary for people that are new to the field of generative text .","title":"ChatGPT for Teachers"},{"location":"#outline-of-course","text":"What is ChatGPT? Why use it When to use it Legal and ethical issues Key Concepts Prompts and responses Tokens (with a lab) Temperature Markdown Creating Great Prompts Making prompts clear Giving context Refining prompts Sample Prompts Syllabus Code of Conduct Selecting a License","title":"Outline of Course"},{"location":"contacts/","text":"Contacts Dan McCreary","title":"Contacts"},{"location":"contacts/#contacts","text":"Dan McCreary","title":"Contacts"},{"location":"getting-started/","text":"Getting Started You can get started in just a few minutes. To use these materials you will need two things: A valid account on either ChatGPT or an account on the OpenAI Playground. Link to ChatGPT A place to put the generated content. We suggest you use GitHub Pages if you would like to share your content with others. To use GitHub Pages you will need a GitHub account. Link to GitHub The way this course runs is that the instructor will show you a suggested prompt and then ask you to try that same prompt on your system. If you are happy with the results, you can then copy and paste the results into your website. Rendering Tools No installation web rendering tools Use these if you have only a web browser orChromebook Trinket.io good for rendering basic Python and turtle graphics JSFiddle.com - good for testing HTML, JavaScript and SVG Desktop Installation Thonny - Basic Python and MicroPython Visual Studio Code - Use for rendering charts and plotting Directory Structure Here is a suggestion structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 HOME docs index.md lessons lesson01.md lesson02.md glossary.md mkdocs.yml license.md code-of-conduct.md README.md src plot-sine.py The structure of your website (navigation, headers, footers) is controller by the settings in your mkdocs.yml file.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"You can get started in just a few minutes. To use these materials you will need two things: A valid account on either ChatGPT or an account on the OpenAI Playground. Link to ChatGPT A place to put the generated content. We suggest you use GitHub Pages if you would like to share your content with others. To use GitHub Pages you will need a GitHub account. Link to GitHub The way this course runs is that the instructor will show you a suggested prompt and then ask you to try that same prompt on your system. If you are happy with the results, you can then copy and paste the results into your website.","title":"Getting Started"},{"location":"getting-started/#rendering-tools","text":"","title":"Rendering Tools"},{"location":"getting-started/#no-installation-web-rendering-tools","text":"Use these if you have only a web browser orChromebook Trinket.io good for rendering basic Python and turtle graphics JSFiddle.com - good for testing HTML, JavaScript and SVG","title":"No installation web rendering tools"},{"location":"getting-started/#desktop-installation","text":"Thonny - Basic Python and MicroPython Visual Studio Code - Use for rendering charts and plotting","title":"Desktop Installation"},{"location":"getting-started/#directory-structure","text":"Here is a suggestion structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 HOME docs index.md lessons lesson01.md lesson02.md glossary.md mkdocs.yml license.md code-of-conduct.md README.md src plot-sine.py The structure of your website (navigation, headers, footers) is controller by the settings in your mkdocs.yml file.","title":"Directory Structure"},{"location":"glossary/","text":"Glossary of Terms for Course on ChatGPT for Teachers ChatGPT Fine-Tuning Generative Text GPT Markdown OpenAI Prompt SVG SVG means Scalable Vector Graphics. It is a standard format for generating vector-images (not bitmaps) that can be easily generated by ChatGPT. Tokens","title":"Glossary"},{"location":"glossary/#glossary-of-terms-for-course-on-chatgpt-for-teachers","text":"","title":"Glossary of Terms for Course on ChatGPT for Teachers"},{"location":"glossary/#chatgpt","text":"","title":"ChatGPT"},{"location":"glossary/#fine-tuning","text":"","title":"Fine-Tuning"},{"location":"glossary/#generative-text","text":"","title":"Generative Text"},{"location":"glossary/#gpt","text":"","title":"GPT"},{"location":"glossary/#markdown","text":"","title":"Markdown"},{"location":"glossary/#openai","text":"","title":"OpenAI"},{"location":"glossary/#prompt","text":"","title":"Prompt"},{"location":"glossary/#svg","text":"SVG means Scalable Vector Graphics. It is a standard format for generating vector-images (not bitmaps) that can be easily generated by ChatGPT.","title":"SVG"},{"location":"glossary/#tokens","text":"","title":"Tokens"},{"location":"markdown-summary/","text":"Summary of Markdown Elements Header 1 (Document Title) # Header 1 Header Level 2 ## Header Level 2 Used as the main sections of a document. Header Level 3 ### Header Level 3 Used as the sub-sections of a document. Header Level 4 ### Header Level 3 Used as the sub-sub sections of a document and glossary terms. Bold *bold** Italics *italics* Numbered List One Two Three 1 2 3 1. One 2. Two 3. Three Bullet List Item Item Item 1 2 3 * Item * Item * Item Link 1 [Label](destination) Image 1 ![Alt Text](../img/path)","title":"Markdown Summary"},{"location":"markdown-summary/#summary-of-markdown-elements","text":"","title":"Summary of Markdown Elements"},{"location":"markdown-summary/#header-1-document-title","text":"# Header 1","title":"Header 1 (Document Title)"},{"location":"markdown-summary/#header-level-2","text":"## Header Level 2 Used as the main sections of a document.","title":"Header Level 2"},{"location":"markdown-summary/#header-level-3","text":"### Header Level 3 Used as the sub-sections of a document.","title":"Header Level 3"},{"location":"markdown-summary/#header-level-4","text":"### Header Level 3 Used as the sub-sub sections of a document and glossary terms. Bold *bold** Italics *italics* Numbered List One Two Three 1 2 3 1. One 2. Two 3. Three Bullet List Item Item Item 1 2 3 * Item * Item * Item Link 1 [Label](destination) Image 1 ![Alt Text](../img/path)","title":"Header Level 4"},{"location":"references/","text":"ChatGPT for Teachers References [Dan McCreary's Blog]h(ttps://medium.com/@dmccreary/chatgpt-and-knowledge-strategy-864ff31ee03c)","title":"References"},{"location":"references/#chatgpt-for-teachers-references","text":"[Dan McCreary's Blog]h(ttps://medium.com/@dmccreary/chatgpt-and-knowledge-strategy-864ff31ee03c)","title":"ChatGPT for Teachers References"},{"location":"slides/","text":"List of Slide Presentations for ChatGPT for Teachers Single Slide Ten Minute Version Twenty Minute Version One Hour Class One Hour Class Half Day Workshop TBD","title":"Slides"},{"location":"slides/#list-of-slide-presentations-for-chatgpt-for-teachers","text":"","title":"List of Slide Presentations for ChatGPT for Teachers"},{"location":"slides/#single-slide","text":"","title":"Single Slide"},{"location":"slides/#ten-minute-version","text":"","title":"Ten Minute Version"},{"location":"slides/#twenty-minute-version","text":"","title":"Twenty Minute Version"},{"location":"slides/#one-hour-class","text":"One Hour Class","title":"One Hour Class"},{"location":"slides/#half-day-workshop","text":"TBD","title":"Half Day Workshop"},{"location":"tips-and-tricks/","text":"Prompt Guide Provide Context Grade level Tone Vocabulary Give Examples Include in your prompt examples of what you are looking for. If you want a list of things include the first items from a list. 1 2 3 4 5 6 7 Generate a list of topics for a class on Python: 1. Getting started 2. Variables 3. Conditionals 4. Loops 5. Debugging Ask questions To ensure the output is relevant and helpful, ask specific questions within the prompt. This will give the model a better understanding of what you\u2019re looking for. Output Format Most systems don't return results in formats such as MS-Word or MS-Powerpoint. HTML is also hard to read. Try using markdown format. Try Line Art Formats Refine, refine, refine. To get better results, make sure the prompt is specific and concise. Include the questions you want to ask and the context of the conversation, and think about the tone of the conversation as well. Step 6: Use the refined prompt to get better ChatGPT output. Test it out. Use the refined prompt to get a better sense of the output from ChatGPT. Ask the model questions and provide examples of the desired output. The more specific the prompt, the better the results will be. Step 7: Practice making better prompts. Practice makes perfect. Keep practicing and refining your prompts. As you gain more experience with ChatGPT, it will become easier to write better prompts that provide more useful output. With patience and practice, you\u2019ll be a pro at crafting ChatGPT prompts in no time.","title":"Tips and Tricks"},{"location":"tips-and-tricks/#prompt-guide","text":"","title":"Prompt Guide"},{"location":"tips-and-tricks/#provide-context","text":"Grade level Tone Vocabulary","title":"Provide Context"},{"location":"tips-and-tricks/#give-examples","text":"Include in your prompt examples of what you are looking for. If you want a list of things include the first items from a list. 1 2 3 4 5 6 7 Generate a list of topics for a class on Python: 1. Getting started 2. Variables 3. Conditionals 4. Loops 5. Debugging","title":"Give Examples"},{"location":"tips-and-tricks/#ask-questions","text":"To ensure the output is relevant and helpful, ask specific questions within the prompt. This will give the model a better understanding of what you\u2019re looking for.","title":"Ask questions"},{"location":"tips-and-tricks/#output-format","text":"Most systems don't return results in formats such as MS-Word or MS-Powerpoint. HTML is also hard to read. Try using markdown format.","title":"Output Format"},{"location":"tips-and-tricks/#try-line-art-formats","text":"Refine, refine, refine. To get better results, make sure the prompt is specific and concise. Include the questions you want to ask and the context of the conversation, and think about the tone of the conversation as well. Step 6: Use the refined prompt to get better ChatGPT output. Test it out. Use the refined prompt to get a better sense of the output from ChatGPT. Ask the model questions and provide examples of the desired output. The more specific the prompt, the better the results will be. Step 7: Practice making better prompts. Practice makes perfect. Keep practicing and refining your prompts. As you gain more experience with ChatGPT, it will become easier to write better prompts that provide more useful output. With patience and practice, you\u2019ll be a pro at crafting ChatGPT prompts in no time.","title":"Try Line Art Formats"},{"location":"concepts/","text":"GPT Concepts Prompts Tokens Output Formats","title":"Intro"},{"location":"concepts/#gpt-concepts","text":"Prompts Tokens Output Formats","title":"GPT Concepts"},{"location":"concepts/output-formats/","text":"Output Formats Just text today Text types: Markdown Markdown tables HTML SVG Mermaid","title":"Output Formats"},{"location":"concepts/output-formats/#output-formats","text":"Just text today Text types: Markdown Markdown tables HTML SVG Mermaid","title":"Output Formats"},{"location":"concepts/prompts/","text":"","title":"Prompts"},{"location":"concepts/tokens/","text":"Tokens The GPT family of models process text using tokens, which are common sequences of characters found in text. The models understand the statistical relationships between these tokens, and excel at producing the next token in a sequence of tokens. Budget: 4,000 tokens Prompt + Response What are tokens and how to count them? OpenAI GPT Tokenizer","title":"Tokens"},{"location":"concepts/tokens/#tokens","text":"The GPT family of models process text using tokens, which are common sequences of characters found in text. The models understand the statistical relationships between these tokens, and excel at producing the next token in a sequence of tokens. Budget: 4,000 tokens Prompt + Response What are tokens and how to count them? OpenAI GPT Tokenizer","title":"Tokens"},{"location":"prompts/","text":"","title":"Intro"},{"location":"prompts/01-syllabus/","text":"Syllabus Settings model:davinci temperature 0.2 length: 1000 Prompt Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 Create a syllabus for a 10-week course for junior high school students on computational thinking. Provide the first four lessons. For each lesson, include a summary of the topics covered, prerequisites, and learning objectives. Results in markdown format. # Computational Thinking Course Syllabus ## Course Description This 10-week course is designed to introduce junior high school students to the fundamentals of computational thinking. Students will learn the basics of problem solving, algorithms, and programming. ## Prerequisites No prior knowledge of programming is required. ## Course Objectives By the end of this course, students will be able to: - Understand the fundamentals of problem solving - Identify and create algorithms - Write basic programs in a programming language ## Lesson 1: Introduction to Problem Solving **Topics Covered:** - Overview of problem solving - Identifying and defining problems - Brainstorming solutions **Prerequisites:** None **Learning Objectives:** - Understand the fundamentals of problem solving - Identify and define a problem - Generate possible solutions to a problem ## Lesson 2: Algorithms **Topics Covered:** - Overview of algorithms - Identifying and defining algorithms - Creating algorithms **Prerequisites:** Introduction to Problem Solving **Learning Objectives:** - Understand the fundamentals of algorithms - Identify and define an algorithm - Create an algorithm to solve a problem ## Lesson 3: Programming Basics **Topics Covered:** - Overview of programming - Identifying and defining programming languages - Writing basic programs **Prerequisites:** Algorithms **Learning Objectives:** - Understand the fundamentals of programming - Identify and define a programming language - Write a basic program to solve a problem ## Lesson 4: Debugging **Topics Covered:** - Overview of debugging - Identifying and fixing errors - Debugging programs **Prerequisites:** Programming Basics **Learning Objectives:** - Understand the fundamentals of debugging - Identify and fix errors in a program - Debug a program to solve a problem","title":"Syllabus"},{"location":"prompts/01-syllabus/#syllabus","text":"","title":"Syllabus"},{"location":"prompts/01-syllabus/#settings","text":"model:davinci temperature 0.2 length: 1000","title":"Settings"},{"location":"prompts/01-syllabus/#prompt","text":"","title":"Prompt"},{"location":"prompts/01-syllabus/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 Create a syllabus for a 10-week course for junior high school students on computational thinking. Provide the first four lessons. For each lesson, include a summary of the topics covered, prerequisites, and learning objectives. Results in markdown format. # Computational Thinking Course Syllabus ## Course Description This 10-week course is designed to introduce junior high school students to the fundamentals of computational thinking. Students will learn the basics of problem solving, algorithms, and programming. ## Prerequisites No prior knowledge of programming is required. ## Course Objectives By the end of this course, students will be able to: - Understand the fundamentals of problem solving - Identify and create algorithms - Write basic programs in a programming language ## Lesson 1: Introduction to Problem Solving **Topics Covered:** - Overview of problem solving - Identifying and defining problems - Brainstorming solutions **Prerequisites:** None **Learning Objectives:** - Understand the fundamentals of problem solving - Identify and define a problem - Generate possible solutions to a problem ## Lesson 2: Algorithms **Topics Covered:** - Overview of algorithms - Identifying and defining algorithms - Creating algorithms **Prerequisites:** Introduction to Problem Solving **Learning Objectives:** - Understand the fundamentals of algorithms - Identify and define an algorithm - Create an algorithm to solve a problem ## Lesson 3: Programming Basics **Topics Covered:** - Overview of programming - Identifying and defining programming languages - Writing basic programs **Prerequisites:** Algorithms **Learning Objectives:** - Understand the fundamentals of programming - Identify and define a programming language - Write a basic program to solve a problem ## Lesson 4: Debugging **Topics Covered:** - Overview of debugging - Identifying and fixing errors - Debugging programs **Prerequisites:** Programming Basics **Learning Objectives:** - Understand the fundamentals of debugging - Identify and fix errors in a program - Debug a program to solve a problem","title":"Response"},{"location":"prompts/02-code-of-conduct/","text":"","title":"Code of Conduct"},{"location":"prompts/03-license/","text":"Using ChatGPT to Select the Right License Why should we be concerned about licenses? Legal Issues Sharing with other teachers Attribution Non-commercial Sample Prompt I am a teacher that is creating new lesson plans. I want other teachers to be able to reuse my content and modify it for their classrooms. However, I want them to give me attribution and I don't want anyone to be able to resell my content. What creative commons license should I use? Sample Response The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license would be the best option for you. This license allows others to reuse and modify your content for non-commercial purposes, as long as they give you attribution and share their modified content under the same license. It also prevents anyone from reselling your content. You can then look-up this name and provide a link to it: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Adding the License to Each Page","title":"License"},{"location":"prompts/03-license/#using-chatgpt-to-select-the-right-license","text":"","title":"Using ChatGPT to Select the Right License"},{"location":"prompts/03-license/#why-should-we-be-concerned-about-licenses","text":"","title":"Why should we be concerned about licenses?"},{"location":"prompts/03-license/#legal-issues","text":"Sharing with other teachers Attribution Non-commercial","title":"Legal Issues"},{"location":"prompts/03-license/#sample-prompt","text":"I am a teacher that is creating new lesson plans. I want other teachers to be able to reuse my content and modify it for their classrooms. However, I want them to give me attribution and I don't want anyone to be able to resell my content. What creative commons license should I use?","title":"Sample Prompt"},{"location":"prompts/03-license/#sample-response","text":"The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license would be the best option for you. This license allows others to reuse and modify your content for non-commercial purposes, as long as they give you attribution and share their modified content under the same license. It also prevents anyone from reselling your content. You can then look-up this name and provide a link to it: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International","title":"Sample Response"},{"location":"prompts/03-license/#adding-the-license-to-each-page","text":"","title":"Adding the License to Each Page"},{"location":"prompts/04-license-footer/","text":"License Footer Prompt 1 I want to create a web page with a license on the footer of each page. I am using mkdocs. How can I add some HTML to the footer to indicate my license is covered under \"The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\"? Response 1 2 3 4 5 You can add a footer to your web page using the mkdocs-footer-plugin. This plugin allows you to add custom HTML to the footer of your page. To add the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license to the footer, you can add the following HTML code to the footer.html file: <div> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. </div>","title":"License Footer"},{"location":"prompts/04-license-footer/#license-footer","text":"","title":"License Footer"},{"location":"prompts/04-license-footer/#prompt","text":"1 I want to create a web page with a license on the footer of each page. I am using mkdocs. How can I add some HTML to the footer to indicate my license is covered under \"The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\"?","title":"Prompt"},{"location":"prompts/04-license-footer/#response","text":"1 2 3 4 5 You can add a footer to your web page using the mkdocs-footer-plugin. This plugin allows you to add custom HTML to the footer of your page. To add the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license to the footer, you can add the following HTML code to the footer.html file: <div> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. </div>","title":"Response"},{"location":"prompts/05-mkdocs/","text":"Mkdoc Configuration File You want to generate a mkdocs configuration file that includes: Navigation Custom footer with license Prompt 1 I want to create a new microsite using mkdocs and the material theme. Generate a sample mkdocs.yml file that includes a left-side nav bar and pages for home, lessons, a glossary, references and contacts. Add extensions that allows me to create a custom html footer for my license on every page. Add an extension for code highlighting. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 site_name: ChatGPT for Teachers theme: name: 'material' language: en nav: - Home: index.md - Lessons: lessons.md - Glossary: glossary.md - References: references.md - Contacts: contacts.md extra_css: - custom.css extra_javascript: - custom.js markdown_extensions: - footnotes - codehilite footer_html: - <p>Copyright \u00a9 2020 My Microsite. All rights reserved.</p>","title":"Mkdocs Config"},{"location":"prompts/05-mkdocs/#mkdoc-configuration-file","text":"You want to generate a mkdocs configuration file that includes: Navigation Custom footer with license","title":"Mkdoc Configuration File"},{"location":"prompts/05-mkdocs/#prompt","text":"1 I want to create a new microsite using mkdocs and the material theme. Generate a sample mkdocs.yml file that includes a left-side nav bar and pages for home, lessons, a glossary, references and contacts. Add extensions that allows me to create a custom html footer for my license on every page. Add an extension for code highlighting.","title":"Prompt"},{"location":"prompts/05-mkdocs/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 site_name: ChatGPT for Teachers theme: name: 'material' language: en nav: - Home: index.md - Lessons: lessons.md - Glossary: glossary.md - References: references.md - Contacts: contacts.md extra_css: - custom.css extra_javascript: - custom.js markdown_extensions: - footnotes - codehilite footer_html: - <p>Copyright \u00a9 2020 My Microsite. All rights reserved.</p>","title":"Response"},{"location":"prompts/06-lessons/","text":"Generating Lessons Lessons are individual units of learning within a course. In order to generate detailed lesson plans we need to give ChatGPT some context about: The audience (grade level) The subject or topic The background The output format (markdown) Sample Prompt 1 2 3 4 5 6 Create a detailed lesson plan for teaching loops in Python for a junior high-school student about 12 years old. Assume the student has already had a basic introduction to Python and has had lessons on: 1. Syntax 2. Conditionals Generate sample Python code within markdown that will include an input list of colors (red, green blue etc.) and show how to loop through the list of colors to print them each out. Sample Response Below is the sample response. Because the response includes markdown and sample code, we don't make it a simple text object. Lesson Plan: Loops in Python Objectives Understand the concept of loops in Python Learn how to use loops to iterate through a list of items Create a program that uses a loop to print out a list of colors Materials Computer with Python installed Sample code Introduction Welcome to our lesson on loops in Python! In this lesson, we will learn how to use loops to iterate through a list of items. We will also create a program that uses a loop to print out a list of colors. What is a Loop? A loop is a programming construct that allows us to repeat a set of instructions multiple times. This is useful when we want to perform the same task on multiple items. For example, if we have a list of colors, we can use a loop to print out each color in the list. Types of Loops There are two types of loops in Python: for loops and while loops. A for loop is used when we know how many times we want to repeat the instructions. For example, if we have a list of 10 colors, we can use a for loop to print out each color in the list. A while loop is used when we don't know how many times we want to repeat the instructions. For example, if we want to keep asking the user for input until they enter a certain value, we can use a while loop. Sample Code Let's look at some sample code that uses a for loop to print out a list of colors. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: 1 2 3 red green blue Practice Now it's time to practice writing a program that uses a loop to print out a list of colors. Create a list of colors and use a for loop to print out each color in the list. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" , \"yellow\" , \"orange\" , \"purple\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: 1 2 3 4 5 6 red green blue yellow orange purple Conclusion Congratulations! You have now learned how to use loops to iterate through a list of items. You have also created a program that uses a loop to print out a list of colors.","title":"Lessons"},{"location":"prompts/06-lessons/#generating-lessons","text":"Lessons are individual units of learning within a course. In order to generate detailed lesson plans we need to give ChatGPT some context about: The audience (grade level) The subject or topic The background The output format (markdown)","title":"Generating Lessons"},{"location":"prompts/06-lessons/#sample-prompt","text":"1 2 3 4 5 6 Create a detailed lesson plan for teaching loops in Python for a junior high-school student about 12 years old. Assume the student has already had a basic introduction to Python and has had lessons on: 1. Syntax 2. Conditionals Generate sample Python code within markdown that will include an input list of colors (red, green blue etc.) and show how to loop through the list of colors to print them each out.","title":"Sample Prompt"},{"location":"prompts/06-lessons/#sample-response","text":"Below is the sample response. Because the response includes markdown and sample code, we don't make it a simple text object.","title":"Sample Response"},{"location":"prompts/06-lessons/#lesson-plan-loops-in-python","text":"","title":"Lesson Plan: Loops in Python"},{"location":"prompts/06-lessons/#objectives","text":"Understand the concept of loops in Python Learn how to use loops to iterate through a list of items Create a program that uses a loop to print out a list of colors","title":"Objectives"},{"location":"prompts/06-lessons/#materials","text":"Computer with Python installed Sample code","title":"Materials"},{"location":"prompts/06-lessons/#introduction","text":"Welcome to our lesson on loops in Python! In this lesson, we will learn how to use loops to iterate through a list of items. We will also create a program that uses a loop to print out a list of colors.","title":"Introduction"},{"location":"prompts/06-lessons/#what-is-a-loop","text":"A loop is a programming construct that allows us to repeat a set of instructions multiple times. This is useful when we want to perform the same task on multiple items. For example, if we have a list of colors, we can use a loop to print out each color in the list.","title":"What is a Loop?"},{"location":"prompts/06-lessons/#types-of-loops","text":"There are two types of loops in Python: for loops and while loops. A for loop is used when we know how many times we want to repeat the instructions. For example, if we have a list of 10 colors, we can use a for loop to print out each color in the list. A while loop is used when we don't know how many times we want to repeat the instructions. For example, if we want to keep asking the user for input until they enter a certain value, we can use a while loop.","title":"Types of Loops"},{"location":"prompts/06-lessons/#sample-code","text":"Let's look at some sample code that uses a for loop to print out a list of colors. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: 1 2 3 red green blue","title":"Sample Code"},{"location":"prompts/06-lessons/#practice","text":"Now it's time to practice writing a program that uses a loop to print out a list of colors. Create a list of colors and use a for loop to print out each color in the list. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" , \"yellow\" , \"orange\" , \"purple\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: 1 2 3 4 5 6 red green blue yellow orange purple","title":"Practice"},{"location":"prompts/06-lessons/#conclusion","text":"Congratulations! You have now learned how to use loops to iterate through a list of items. You have also created a program that uses a loop to print out a list of colors.","title":"Conclusion"},{"location":"prompts/07-glossary/","text":"Glossary of Terms Prompt 1 2 3 4 Create a glossary of terms for an introductory class in Python. For each term, return the markdown format using four hashtags before each term name followed by the definition. #### Term Name Definition Response Variable Definition: A named memory location used to store data Example: x = 5 Function Definition: A block of code that performs a specific task Example: def add_two_numbers(x, y): return x + y Loop Definition: A control flow statement that allows code to be executed repeatedly Example: for i in range(10): print(i) List Definition: An ordered collection of data Example: my_list = [1, 2, 3, 4] Dictionary Definition: A collection of key-value pairs Example: my_dict = {'name': 'John', 'age': 30} String Definition: A sequence of characters Example: my_string = 'Hello World!'","title":"Glossary"},{"location":"prompts/07-glossary/#glossary-of-terms","text":"","title":"Glossary of Terms"},{"location":"prompts/07-glossary/#prompt","text":"1 2 3 4 Create a glossary of terms for an introductory class in Python. For each term, return the markdown format using four hashtags before each term name followed by the definition. #### Term Name Definition","title":"Prompt"},{"location":"prompts/07-glossary/#response","text":"","title":"Response"},{"location":"prompts/07-glossary/#variable","text":"Definition: A named memory location used to store data Example: x = 5","title":"Variable"},{"location":"prompts/07-glossary/#function","text":"Definition: A block of code that performs a specific task Example: def add_two_numbers(x, y): return x + y","title":"Function"},{"location":"prompts/07-glossary/#loop","text":"Definition: A control flow statement that allows code to be executed repeatedly Example: for i in range(10): print(i)","title":"Loop"},{"location":"prompts/07-glossary/#list","text":"Definition: An ordered collection of data Example: my_list = [1, 2, 3, 4]","title":"List"},{"location":"prompts/07-glossary/#dictionary","text":"Definition: A collection of key-value pairs Example: my_dict = {'name': 'John', 'age': 30}","title":"Dictionary"},{"location":"prompts/07-glossary/#string","text":"Definition: A sequence of characters Example: my_string = 'Hello World!'","title":"String"},{"location":"prompts/08-concept-graph/","text":"Concept Graph Teachers frequently have a list of topics that they would like to cover, but they are not expert enough in the topic to know what order to teach the concepts. ChatGPT can help! ChatGPT can return a textual representation of how concepts depend on other concepts. A concept graph is a document that suggests the order that concepts should be taught in a course. The format of the document is usually a dependency structure with each concept being a node on the graph that indicates what other concepts must be mastered before this concept is introduced. Prompt You are an AI that helps teachers figure out what order to teach topics in the classroom. Create an ordered dependency list for the following topics in a Python Course: Introduction Getting Started Variables Conditionals Loops Lists Data Structures Functions Function Parameters Random Numbers Recursion Return the results in Mermaid dependency format like this: graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists) Response To see if ChatGPT understands the idea of concept order we want to get a response that shows that you need to understand functions before you use function parameters or recursion. here is the response: 1 2 3 4 5 6 D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion) Yes indeed! ChatGPT knew that concept H(Functions) needs to be taught before Function Parameters and Recursion. Here is the entire list 1 2 3 4 5 6 7 8 9 10 11 12 graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists) D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion) Concept Graph Link to Mermaid Live ~ Image of Concept Graph","title":"Concept Graph"},{"location":"prompts/08-concept-graph/#concept-graph","text":"Teachers frequently have a list of topics that they would like to cover, but they are not expert enough in the topic to know what order to teach the concepts. ChatGPT can help! ChatGPT can return a textual representation of how concepts depend on other concepts. A concept graph is a document that suggests the order that concepts should be taught in a course. The format of the document is usually a dependency structure with each concept being a node on the graph that indicates what other concepts must be mastered before this concept is introduced.","title":"Concept Graph"},{"location":"prompts/08-concept-graph/#prompt","text":"You are an AI that helps teachers figure out what order to teach topics in the classroom. Create an ordered dependency list for the following topics in a Python Course: Introduction Getting Started Variables Conditionals Loops Lists Data Structures Functions Function Parameters Random Numbers Recursion Return the results in Mermaid dependency format like this: graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists)","title":"Prompt"},{"location":"prompts/08-concept-graph/#response","text":"To see if ChatGPT understands the idea of concept order we want to get a response that shows that you need to understand functions before you use function parameters or recursion. here is the response: 1 2 3 4 5 6 D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion) Yes indeed! ChatGPT knew that concept H(Functions) needs to be taught before Function Parameters and Recursion. Here is the entire list 1 2 3 4 5 6 7 8 9 10 11 12 graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists) D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion)","title":"Response"},{"location":"prompts/08-concept-graph/#concept-graph_1","text":"Link to Mermaid Live ~ Image of Concept Graph","title":"Concept Graph"},{"location":"prompts/09-sample-code/","text":"Generating Sample Code Prompt Create a Python program that prints \"Hello World!\" Response 1 print ( \"Hello World!\" ) Prompt Create a python function that resizes images to all be 512X512","title":"Sample Code"},{"location":"prompts/09-sample-code/#generating-sample-code","text":"","title":"Generating Sample Code"},{"location":"prompts/09-sample-code/#prompt","text":"Create a Python program that prints \"Hello World!\"","title":"Prompt"},{"location":"prompts/09-sample-code/#response","text":"1 print ( \"Hello World!\" )","title":"Response"},{"location":"prompts/09-sample-code/#prompt_1","text":"Create a python function that resizes images to all be 512X512","title":"Prompt"},{"location":"prompts/09a-turtle-graphics/","text":"Turtle Graphics You can use GPT to generate turtle graphics code and then use trinket.io to execute the code. Prompt 1 Use the Python turtle library to draw a square. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import turtle # Create a turtle object t = turtle . Turtle () # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 )","title":"Turtle Graphics"},{"location":"prompts/09a-turtle-graphics/#turtle-graphics","text":"You can use GPT to generate turtle graphics code and then use trinket.io to execute the code.","title":"Turtle Graphics"},{"location":"prompts/09a-turtle-graphics/#prompt","text":"1 Use the Python turtle library to draw a square.","title":"Prompt"},{"location":"prompts/09a-turtle-graphics/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import turtle # Create a turtle object t = turtle . Turtle () # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 )","title":"Response"},{"location":"prompts/10-html/","text":"","title":"HTML"},{"location":"prompts/11-svg/","text":"Generating SVG prompt Generate the SVG code for a red circle within a blue square. Result 1 2 3 4 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"> <rect width=\"100\" height=\"100\" style=\"fill:blue;\" /> <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /> </svg>","title":"SVG"},{"location":"prompts/11-svg/#generating-svg","text":"","title":"Generating SVG"},{"location":"prompts/11-svg/#prompt","text":"Generate the SVG code for a red circle within a blue square.","title":"prompt"},{"location":"prompts/11-svg/#result","text":"1 2 3 4 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"> <rect width=\"100\" height=\"100\" style=\"fill:blue;\" /> <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /> </svg>","title":"Result"},{"location":"prompts/12-debugging/","text":"Debugging You can give GPT a sample program and ask it to find the bugs or change the output. Prompt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Find the bug and fix it in this program: # Create a Python program to draw a plot of the function y = 3 * x * x + 4 * x - 5 import matplotlib.pyplot as plt x = range(-10, 11) y = (21,) for i in x: y = [3*i*i + 4*i - 5] plt.plot(x, y) plt.title('y = 3x^2 + 4x - 5') plt.xlabel('x') plt.ylabel('y') plt.show() Response 1 2 3 4 5 6 7 8 9 10 11 12 import matplotlib.pyplot as plt x = range ( - 10 , 11 ) y = [] for i in x : y . append ( 3 * i * i + 4 * i - 5 ) plt . plot ( x , y ) plt . title ( 'y = 3x^2 + 4x - 5' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ()","title":"Debugging"},{"location":"prompts/12-debugging/#debugging","text":"You can give GPT a sample program and ask it to find the bugs or change the output.","title":"Debugging"},{"location":"prompts/12-debugging/#prompt","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Find the bug and fix it in this program: # Create a Python program to draw a plot of the function y = 3 * x * x + 4 * x - 5 import matplotlib.pyplot as plt x = range(-10, 11) y = (21,) for i in x: y = [3*i*i + 4*i - 5] plt.plot(x, y) plt.title('y = 3x^2 + 4x - 5') plt.xlabel('x') plt.ylabel('y') plt.show()","title":"Prompt"},{"location":"prompts/12-debugging/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 import matplotlib.pyplot as plt x = range ( - 10 , 11 ) y = [] for i in x : y . append ( 3 * i * i + 4 * i - 5 ) plt . plot ( x , y ) plt . title ( 'y = 3x^2 + 4x - 5' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ()","title":"Response"},{"location":"prompts/13-charts/","text":"Charts You can give GPT a set of points and have it generate the Python code to plot the points. Bar Chart Prompt 1 Create a Python plotly program to draw a vertical bar chart showing the area of all the continents. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Data labels = [ 'Africa' , 'Antarctica' , 'Asia' , 'Australia' , 'Europe' , 'North America' , 'South America' ] values = [ 30.37 , 14.2 , 44.6 , 8.5 , 10.2 , 24.2 , 17.8 ] # Create figure fig = go . Figure ( data = [ go . Bar ( x = labels , y = values , text = values , textposition = 'auto' , marker_color = '#FFA500' )]) # Change the bar mode fig . update_layout ( barmode = 'stack' ) # Add title fig . update_layout ( title_text = 'Area of Continents' ) # Show figure fig . show () Note the area is millions of square kilometers. Prompt 1 Create a Python program to draw a sine wave using Plotly. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import plotly.graph_objects as go import numpy as np # Generate data x = np . linspace ( 0 , 10 , 1000 ) y = np . sin ( x ) # Create figure fig = go . Figure () # Add trace fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines' , name = 'sin(x)' )) # Set title fig . update_layout ( title_text = 'Sine Wave' ) # Show figure fig . show () Plot a Polynomual Prompt 1 Create a Python program to draw a plot of the function y =2x^2 - 20x + 50 from x=0 to 13 using plotly Response 1 2 3 4 5 6 7 8 9 10 11 12 import plotly.graph_objects as go x = list ( range ( 0 , 13 )) y = [] for i in x : y . append ( 2 * i * i - 20 * i + 50 ) print ( y ) fig = go . Figure () fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines+markers' )) fig . update_layout ( title = 'y = 2x^2 - 20x + 50' , xaxis_title = 'x' , yaxis_title = 'y' ) fig . show () Bar Chart Create a Python plotly program to draw a vertical bar chart showing the area of all the contanents ```py import plotly.graph_objects as go Data labels = ['Africa', 'Antarctica', 'Asia', 'Australia', 'Europe', 'North America', 'South America'] values = [30.37, 14.2, 44.6, 8.5, 10.2, 24.2, 17.8] Create figure fig = go.Figure(data=[go.Bar( x=labels, y=values, text=values, textposition='auto', marker_color='#FFA500' )]) Change the bar mode fig.update_layout(barmode='stack') Add title fig.update_layout(title_text='Area of Continents') Show figure fig.show()","title":"Charts and Plotting"},{"location":"prompts/13-charts/#charts","text":"You can give GPT a set of points and have it generate the Python code to plot the points.","title":"Charts"},{"location":"prompts/13-charts/#bar-chart","text":"","title":"Bar Chart"},{"location":"prompts/13-charts/#prompt","text":"1 Create a Python plotly program to draw a vertical bar chart showing the area of all the continents.","title":"Prompt"},{"location":"prompts/13-charts/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Data labels = [ 'Africa' , 'Antarctica' , 'Asia' , 'Australia' , 'Europe' , 'North America' , 'South America' ] values = [ 30.37 , 14.2 , 44.6 , 8.5 , 10.2 , 24.2 , 17.8 ] # Create figure fig = go . Figure ( data = [ go . Bar ( x = labels , y = values , text = values , textposition = 'auto' , marker_color = '#FFA500' )]) # Change the bar mode fig . update_layout ( barmode = 'stack' ) # Add title fig . update_layout ( title_text = 'Area of Continents' ) # Show figure fig . show () Note the area is millions of square kilometers.","title":"Response"},{"location":"prompts/13-charts/#prompt_1","text":"1 Create a Python program to draw a sine wave using Plotly.","title":"Prompt"},{"location":"prompts/13-charts/#response_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import plotly.graph_objects as go import numpy as np # Generate data x = np . linspace ( 0 , 10 , 1000 ) y = np . sin ( x ) # Create figure fig = go . Figure () # Add trace fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines' , name = 'sin(x)' )) # Set title fig . update_layout ( title_text = 'Sine Wave' ) # Show figure fig . show ()","title":"Response"},{"location":"prompts/13-charts/#plot-a-polynomual","text":"","title":"Plot a Polynomual"},{"location":"prompts/13-charts/#prompt_2","text":"1 Create a Python program to draw a plot of the function y =2x^2 - 20x + 50 from x=0 to 13 using plotly","title":"Prompt"},{"location":"prompts/13-charts/#response_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 import plotly.graph_objects as go x = list ( range ( 0 , 13 )) y = [] for i in x : y . append ( 2 * i * i - 20 * i + 50 ) print ( y ) fig = go . Figure () fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines+markers' )) fig . update_layout ( title = 'y = 2x^2 - 20x + 50' , xaxis_title = 'x' , yaxis_title = 'y' ) fig . show ()","title":"Response"},{"location":"prompts/13-charts/#bar-chart_1","text":"Create a Python plotly program to draw a vertical bar chart showing the area of all the contanents ```py import plotly.graph_objects as go","title":"Bar Chart"},{"location":"prompts/13-charts/#data","text":"labels = ['Africa', 'Antarctica', 'Asia', 'Australia', 'Europe', 'North America', 'South America'] values = [30.37, 14.2, 44.6, 8.5, 10.2, 24.2, 17.8]","title":"Data"},{"location":"prompts/13-charts/#create-figure","text":"fig = go.Figure(data=[go.Bar( x=labels, y=values, text=values, textposition='auto', marker_color='#FFA500' )])","title":"Create figure"},{"location":"prompts/13-charts/#change-the-bar-mode","text":"fig.update_layout(barmode='stack')","title":"Change the bar mode"},{"location":"prompts/13-charts/#add-title","text":"fig.update_layout(title_text='Area of Continents')","title":"Add title"},{"location":"prompts/13-charts/#show-figure","text":"fig.show()","title":"Show figure"},{"location":"prompts/14-tables/","text":"Table Summarization 1 2 3 4 5 Create a markdown table summarizing the fruits from Goocrux: There are many fruits that were found on the recently discovered planet Goocrux. There are neoskizzles that grow there, which are purple and taste like candy. There are also loheckles, which are a grayish blue fruit and are very tart, a little bit like a lemon. Pounits are a bright green color and are more savory than sweet. There are also plenty of loopnovas which are a neon pink flavor and taste like cotton candy. Finally, there are fruits called glowls, which have a very sour and bitter taste which is acidic and caustic, and a pale orange tinge to them. | Fruit | Color | Flavor | Sample response 1 2 3 4 5 | Neoskizzles | Purple | Candy | | Loheckles | Grayish Blue | Tart, like a lemon | | Pounits | Bright Green | Savory | | Loopnovas | Neon Pink | Cotton Candy | | Glowls | Pale Orange | Sour and Bitter, Acidic and Caustic | Fruit Color Flavor Neoskizzles Purple Candy Loheckles Grayish Blue Tart, like a lemon Pounits Bright Green Savory Loopnovas Neon Pink Cotton Candy Glowls Pale Orange Sour and Bitter, Acidic and Caustic","title":"Tables"},{"location":"prompts/14-tables/#table-summarization","text":"1 2 3 4 5 Create a markdown table summarizing the fruits from Goocrux: There are many fruits that were found on the recently discovered planet Goocrux. There are neoskizzles that grow there, which are purple and taste like candy. There are also loheckles, which are a grayish blue fruit and are very tart, a little bit like a lemon. Pounits are a bright green color and are more savory than sweet. There are also plenty of loopnovas which are a neon pink flavor and taste like cotton candy. Finally, there are fruits called glowls, which have a very sour and bitter taste which is acidic and caustic, and a pale orange tinge to them. | Fruit | Color | Flavor |","title":"Table Summarization"},{"location":"prompts/14-tables/#sample-response","text":"1 2 3 4 5 | Neoskizzles | Purple | Candy | | Loheckles | Grayish Blue | Tart, like a lemon | | Pounits | Bright Green | Savory | | Loopnovas | Neon Pink | Cotton Candy | | Glowls | Pale Orange | Sour and Bitter, Acidic and Caustic | Fruit Color Flavor Neoskizzles Purple Candy Loheckles Grayish Blue Tart, like a lemon Pounits Bright Green Savory Loopnovas Neon Pink Cotton Candy Glowls Pale Orange Sour and Bitter, Acidic and Caustic","title":"Sample response"}]}